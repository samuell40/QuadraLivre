generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id          Int     @id @default(autoincrement())
  nome        String
  email       String  @unique
  telefone    String?
  funcao      String
  permissaoId Int
  foto        String? @db.VarChar(2048)
  quadraId    Int?
  quadra       Quadra?       @relation(fields: [quadraId], references: [id])
  permissao    Permissao     @relation(fields: [permissaoId], references: [id])
  agendamentos Agendamento[]
  times        UsuarioTime[]
  partidasCriadas Partida[] @relation("UsuarioCriador")
  partidasParticipando PartidaUsuario[]
}

model Quadra {
  id           Int           @id @default(autoincrement())
  nome         String
  foto         String?       @db.VarChar(2048)
  endereco     String?
  usuarios     Usuario[]
  modalidades  Modalidade[]  @relation("QuadraModalidade")
  agendamentos Agendamento[]
  partidas Partida[]
}

enum TipoAgendamento {
  PARTIDA
  TREINO
  EVENTO
  OUTRO
}

model Agendamento {
  id           Int             @id @default(autoincrement())
  dia          Int
  mes          Int
  ano          Int
  hora         Int
  datahora     DateTime?
  duracao      Int             @default(1)
  status       String          @default("Pendente")
  tipo         TipoAgendamento @default(TREINO)
  usuarioId    Int?
  usuario      Usuario?        @relation(fields: [usuarioId], references: [id])
  quadraId     Int?
  quadra       Quadra?         @relation(fields: [quadraId], references: [id])
  modalidadeId Int?
  modalidade   Modalidade?     @relation("AgendamentoModalidade", fields: [modalidadeId], references: [id])
  timeId       Int?
  time         Time?           @relation("TimeAgendamentos", fields: [timeId], references: [id])
}

model Modalidade {
  id           Int           @id @default(autoincrement())
  nome         String        @unique
  times        Time[]
  quadras      Quadra[]      @relation("QuadraModalidade")
  agendamentos Agendamento[] @relation("AgendamentoModalidade")
  partidas     Partida[]
}

model Time {
  id           Int           @id @default(autoincrement())
  nome         String
  foto         String?       @db.VarChar(2048)
  modalidadeId Int
  modalidade   Modalidade    @relation(fields: [modalidadeId], references: [id])
  usuarios     UsuarioTime[]
  placar       Placar?
  partidasA    Partida[] @relation("TimeAPartidas")
  partidasB    Partida[] @relation("TimeBPartidas")
  agendamentos Agendamento[] @relation("TimeAgendamentos")
  jogadores    Jogador[]  // Jogadores cadastrados no time
}

model Partida {
  id            Int        @id @default(autoincrement())
  data          DateTime   @default(now())
  modalidadeId  Int
  modalidade    Modalidade @relation(fields: [modalidadeId], references: [id])
  timeAId Int
  timeA   Time @relation("TimeAPartidas", fields: [timeAId], references: [id])
  timeBId Int
  timeB   Time @relation("TimeBPartidas", fields: [timeBId], references: [id])
  quadraId Int?
  quadra   Quadra? @relation(fields: [quadraId], references: [id])
  pontosTimeA     Int     @default(0)
  pontosTimeB     Int     @default(0)
  woTimeA         Boolean @default(false)  
  woTimeB         Boolean @default(false)  
  tempoSegundos   Int     @default(0)
  partidaIniciada Boolean @default(false)
  finalizada      Boolean @default(false)
  emIntervalo     Boolean @default(false)
  faltasTimeA         Int @default(0)
  faltasTimeB         Int @default(0)
  substituicoesTimeA  Int @default(0)
  substituicoesTimeB  Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  usuarioCriadorId Int
  usuarioCriador   Usuario @relation("UsuarioCriador", fields: [usuarioCriadorId], references: [id])
  jogadoresPartida JogadorPartida[]
  participantes    PartidaUsuario[]
}

model Jogador {
  id        Int      @id @default(autoincrement())
  nome      String
  foto      String?  @db.VarChar(2048)
  funcaoId  Int?
  funcao    FuncaoJogador?  @relation(fields: [funcaoId], references: [id])
  timeId    Int
  time      Time     @relation(fields: [timeId], references: [id])
  atuacoes JogadorPartida[]
}

model JogadorPartida {
  id        Int    @id @default(autoincrement())
  jogadorId Int
  jogador   Jogador @relation(fields: [jogadorId], references: [id])
  partidaId Int
  partida   Partida @relation(fields: [partidaId], references: [id])
  gols             Int @default(0)
  cartoesAmarelos  Int @default(0)
  cartoesVermelhos Int @default(0)
}

model FuncaoJogador {
  id       Int       @id @default(autoincrement())
  nome     String
  jogadores Jogador[]
}

model PartidaUsuario {
  id          Int       @id @default(autoincrement())
  partidaId   Int
  partida     Partida   @relation(fields: [partidaId], references: [id])
  usuarioId   Int
  usuario     Usuario   @relation(fields: [usuarioId], references: [id])
  permissaoId Int
  permissao   Permissao @relation(fields: [permissaoId], references: [id])
  createdAt   DateTime  @default(now())
}

model Placar {
  id     Int  @id @default(autoincrement())
  timeId Int  @unique
  time   Time @relation(fields: [timeId], references: [id])
  jogos        Int @default(0)
  posicao      Int @default(0)
  pontuacao    Int @default(0)
  vitorias     Int @default(0)
  empates      Int @default(0)
  derrotas     Int @default(0)
  golsPro      Int @default(0)
  golsSofridos Int @default(0)
  saldoDeGols  Int @default(0)
  setsVencidos Int @default(0)
  vitoria3x0   Int @default(0)
  vitoria3x2   Int @default(0)
  derrota2x3   Int @default(0)
  derrota0x3   Int @default(0)
  derrotaWo    Int @default(0)
  visivel Boolean @default(true)
}

model UsuarioTime {
  usuarioId Int
  timeId    Int
  usuario Usuario @relation(fields: [usuarioId], references: [id])
  time    Time    @relation(fields: [timeId], references: [id])
  @@id([usuarioId, timeId]) 
}

model Permissao {
  id        Int       @id @default(autoincrement())
  descricao String
  usuarios  Usuario[]
  partidasUsuarios PartidaUsuario[]
}